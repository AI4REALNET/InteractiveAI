"""Add start_date column to EventModel

Revision ID: 9a13cf7b8742
Revises: 
Create Date: 2023-11-16 14:44:23.746269

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '9a13cf7b8742'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    if column_exists('event_model', 'date'):
        with op.batch_alter_table('event_model', schema=None) as batch_op:
            batch_op.drop_column('date')

    # Add the end_date column if it doesn't exist
    if not column_exists('event_model', 'end_date'):
        with op.batch_alter_table('event_model', schema=None) as batch_op:
            batch_op.add_column(sa.Column('end_date', sa.DateTime(), nullable=True))

    # Add the start_date column if it doesn't exist
    if not column_exists('event_model', 'start_date'):
        with op.batch_alter_table('event_model', schema=None) as batch_op:
            batch_op.add_column(sa.Column('start_date', sa.DateTime(), nullable=True))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('event_model', schema=None) as batch_op:
        batch_op.add_column(sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.drop_column('end_date')
        batch_op.drop_column('start_date')

    # ### end Alembic commands ###


def column_exists(table_name, column_name):
    from sqlalchemy.engine import reflection
    inspector = reflection.Inspector.from_engine(op.get_bind())
    columns = inspector.get_columns(table_name)
    for column in columns:
        if column['name'] == column_name:
            return True
    return False
